ca65 V2.17 - Git 180bb082
Main file   : main.s
Current file: main.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.17 - Git 180bb082
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.17 - Git 180bb082"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_led_init
000000r 1               	.import		_led_set
000000r 1               	.import		_delay_ms
000000r 1               	.import		_uart_init
000000r 1               	.import		_uart_puts
000000r 1               	.import		_uart_printf
000000r 1               	.import		_uart_handler
000000r 1               	.import		_ps2_init
000000r 1               	.export		_sys_banner
000000r 1               	.export		_mdelay
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _sys_banner:
000000r 1  68 63 36 35  	.byte	$68,$63,$36,$35,$30,$32,$20,$73,$79,$73,$74,$65,$6D,$20,$62,$75
000004r 1  30 32 20 73  
000008r 1  79 73 74 65  
000010r 1  69 6C 64 74  	.byte	$69,$6C,$64,$74,$69,$6D,$65,$20,$5B,$31,$39,$3A,$31,$32,$3A,$30
000014r 1  69 6D 65 20  
000018r 1  5B 31 39 3A  
000020r 1  33 20 4A 61  	.byte	$33,$20,$4A,$61,$6E,$20,$20,$33,$20,$32,$30,$31,$39,$5D,$20,$72
000024r 1  6E 20 20 33  
000028r 1  20 32 30 31  
000030r 1  65 76 20 76  	.byte	$65,$76,$20,$76,$31,$2E,$30,$00
000034r 1  31 2E 30 00  
000038r 1               
000038r 1               .segment	"RODATA"
000000r 1               
000000r 1               L000F:
000000r 1  36 35 30 32  	.byte	$36,$35,$30,$32,$20,$48,$6F,$6D,$65,$43,$6F,$6D,$70,$75,$74,$65
000004r 1  20 48 6F 6D  
000008r 1  65 43 6F 6D  
000010r 1  72 20 72 65  	.byte	$72,$20,$72,$65,$61,$64,$79,$2E,$0D,$0A,$00
000014r 1  61 64 79 2E  
000018r 1  0D 0A 00     
00001Br 1               L0018	:=	L000F+0
00001Br 1               L0027:
00001Br 1  75 61 72 74  	.byte	$75,$61,$72,$74,$5F,$70,$72,$69,$6E,$74,$66,$20,$74,$65,$73,$74
00001Fr 1  5F 70 72 69  
000023r 1  6E 74 66 20  
00002Br 1  20 5B 25 73  	.byte	$20,$5B,$25,$73,$5D,$0D,$0A,$00
00002Fr 1  5D 0D 0A 00  
000033r 1               L002B:
000033r 1  73 69 7A 65  	.byte	$73,$69,$7A,$65,$6F,$66,$28,$63,$68,$61,$72,$29,$3A,$20,$20,$25
000037r 1  6F 66 28 63  
00003Br 1  68 61 72 29  
000043r 1  64 20 0D 0A  	.byte	$64,$20,$0D,$0A,$00
000047r 1  00           
000048r 1               L002F:
000048r 1  73 69 7A 65  	.byte	$73,$69,$7A,$65,$6F,$66,$28,$73,$68,$6F,$72,$74,$29,$3A,$20,$25
00004Cr 1  6F 66 28 73  
000050r 1  68 6F 72 74  
000058r 1  64 20 0D 0A  	.byte	$64,$20,$0D,$0A,$00
00005Cr 1  00           
00005Dr 1               L0037:
00005Dr 1  73 69 7A 65  	.byte	$73,$69,$7A,$65,$6F,$66,$28,$6C,$6F,$6E,$67,$29,$3A,$20,$25,$64
000061r 1  6F 66 28 6C  
000065r 1  6F 6E 67 29  
00006Dr 1  20 0D 0A 00  	.byte	$20,$0D,$0A,$00
000071r 1               L0021:
000071r 1  75 61 72 74  	.byte	$75,$61,$72,$74,$20,$74,$65,$73,$74,$20,$73,$74,$61,$72,$74,$2E
000075r 1  20 74 65 73  
000079r 1  74 20 73 74  
000081r 1  0D 0A 00     	.byte	$0D,$0A,$00
000084r 1               L0033:
000084r 1  73 69 7A 65  	.byte	$73,$69,$7A,$65,$6F,$66,$28,$69,$6E,$74,$29,$3A,$20,$25,$64,$20
000088r 1  6F 66 28 69  
00008Cr 1  6E 74 29 3A  
000094r 1  0D 0A 00     	.byte	$0D,$0A,$00
000097r 1               L003B:
000097r 1  56 49 41 31  	.byte	$56,$49,$41,$31,$5F,$50,$41,$30,$3A,$20,$25,$6C,$78,$20,$0D,$0A
00009Br 1  5F 50 41 30  
00009Fr 1  3A 20 25 6C  
0000A7r 1  00           	.byte	$00
0000A8r 1               L0024:
0000A8r 1  75 61 72 74  	.byte	$75,$61,$72,$74,$20,$74,$65,$73,$74,$20,$6F,$6B,$2E,$0D,$0A,$00
0000ACr 1  20 74 65 73  
0000B0r 1  74 20 6F 6B  
0000B8r 1               
0000B8r 1               ; ---------------------------------------------------------------
0000B8r 1               ; void __near__ mdelay (int)
0000B8r 1               ; ---------------------------------------------------------------
0000B8r 1               
0000B8r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_mdelay: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  A0 00        	ldy     #$00
000002r 1  B1 rr        	lda     (sp),y
000004r 1  20 rr rr     	jsr     _delay_ms
000007r 1  4C rr rr     	jmp     incsp2
00000Ar 1               
00000Ar 1               .endproc
00000Ar 1               
00000Ar 1               ; ---------------------------------------------------------------
00000Ar 1               ; long __near__ main (void)
00000Ar 1               ; ---------------------------------------------------------------
00000Ar 1               
00000Ar 1               .segment	"CODE"
00000Ar 1               
00000Ar 1               .proc	_main: near
00000Ar 1               
00000Ar 1               .segment	"CODE"
00000Ar 1               
00000Ar 1  A9 0A        	lda     #$0A
00000Cr 1  20 rr rr     	jsr     pusha0
00000Fr 1  A0 00        	ldy     #$00
000011r 1  20 rr rr     	jsr     _uart_init
000014r 1  A0 00        	ldy     #$00
000016r 1  20 rr rr     	jsr     _led_init
000019r 1  A9 rr        	lda     #<(L000F)
00001Br 1  A2 rr        	ldx     #>(L000F)
00001Dr 1  20 rr rr     	jsr     pushax
000020r 1  20 rr rr     	jsr     _uart_puts
000023r 1  4C rr rr     	jmp     L0013
000026r 1  A9 01        L0011:	lda     #$01
000028r 1  20 rr rr     	jsr     _led_set
00002Br 1  A9 rr        	lda     #<(L0018)
00002Dr 1  A2 rr        	ldx     #>(L0018)
00002Fr 1  20 rr rr     	jsr     pushax
000032r 1  20 rr rr     	jsr     _uart_puts
000035r 1  A2 01        	ldx     #$01
000037r 1  A9 F4        	lda     #$F4
000039r 1  20 rr rr     	jsr     pushax
00003Cr 1  20 rr rr     	jsr     _mdelay
00003Fr 1  A9 00        	lda     #$00
000041r 1  20 rr rr     	jsr     _led_set
000044r 1  A2 01        	ldx     #$01
000046r 1  A9 F4        	lda     #$F4
000048r 1  20 rr rr     	jsr     pushax
00004Br 1  20 rr rr     	jsr     _mdelay
00004Er 1  20 rr rr     L0013:	jsr     ldax0sp
000051r 1  85 rr        	sta     regsave
000053r 1  86 rr        	stx     regsave+1
000055r 1  20 rr rr     	jsr     decax1
000058r 1  20 rr rr     	jsr     stax0sp
00005Br 1  A5 rr        	lda     regsave
00005Dr 1  05 rr        	ora     regsave+1
00005Fr 1  D0 C5        	bne     L0011
000061r 1  A9 rr        	lda     #<(L0021)
000063r 1  A2 rr        	ldx     #>(L0021)
000065r 1  20 rr rr     	jsr     pushax
000068r 1  20 rr rr     	jsr     _uart_puts
00006Br 1  A9 rr        	lda     #<(L0024)
00006Dr 1  A2 rr        	ldx     #>(L0024)
00006Fr 1  20 rr rr     	jsr     pushax
000072r 1  20 rr rr     	jsr     _uart_puts
000075r 1  A9 rr        	lda     #<(L0027)
000077r 1  A2 rr        	ldx     #>(L0027)
000079r 1  20 rr rr     	jsr     pushax
00007Cr 1  A9 rr        	lda     #<(_sys_banner)
00007Er 1  A2 rr        	ldx     #>(_sys_banner)
000080r 1  20 rr rr     	jsr     pushax
000083r 1  A0 04        	ldy     #$04
000085r 1  20 rr rr     	jsr     _uart_printf
000088r 1  A9 rr        	lda     #<(L002B)
00008Ar 1  A2 rr        	ldx     #>(L002B)
00008Cr 1  20 rr rr     	jsr     pushax
00008Fr 1  A9 01        	lda     #$01
000091r 1  20 rr rr     	jsr     pusha0
000094r 1  A0 04        	ldy     #$04
000096r 1  20 rr rr     	jsr     _uart_printf
000099r 1  A9 rr        	lda     #<(L002F)
00009Br 1  A2 rr        	ldx     #>(L002F)
00009Dr 1  20 rr rr     	jsr     pushax
0000A0r 1  A9 02        	lda     #$02
0000A2r 1  20 rr rr     	jsr     pusha0
0000A5r 1  A0 04        	ldy     #$04
0000A7r 1  20 rr rr     	jsr     _uart_printf
0000AAr 1  A9 rr        	lda     #<(L0033)
0000ACr 1  A2 rr        	ldx     #>(L0033)
0000AEr 1  20 rr rr     	jsr     pushax
0000B1r 1  A9 02        	lda     #$02
0000B3r 1  20 rr rr     	jsr     pusha0
0000B6r 1  A0 04        	ldy     #$04
0000B8r 1  20 rr rr     	jsr     _uart_printf
0000BBr 1  A9 rr        	lda     #<(L0037)
0000BDr 1  A2 rr        	ldx     #>(L0037)
0000BFr 1  20 rr rr     	jsr     pushax
0000C2r 1  A9 04        	lda     #$04
0000C4r 1  20 rr rr     	jsr     pusha0
0000C7r 1  A8           	tay
0000C8r 1  20 rr rr     	jsr     _uart_printf
0000CBr 1  A9 rr        	lda     #<(L003B)
0000CDr 1  A2 rr        	ldx     #>(L003B)
0000CFr 1  20 rr rr     	jsr     pushax
0000D2r 1  A2 00        	ldx     #$00
0000D4r 1  A9 20        	lda     #$20
0000D6r 1  85 rr        	sta     sreg
0000D8r 1  A9 7F        	lda     #$7F
0000DAr 1  85 rr        	sta     sreg+1
0000DCr 1  A9 A0        	lda     #$A0
0000DEr 1  20 rr rr     	jsr     pusheax
0000E1r 1  A0 06        	ldy     #$06
0000E3r 1  20 rr rr     	jsr     _uart_printf
0000E6r 1  A0 00        	ldy     #$00
0000E8r 1  20 rr rr     	jsr     _ps2_init
0000EBr 1  A0 00        L0042:	ldy     #$00
0000EDr 1  20 rr rr     	jsr     _uart_handler
0000F0r 1  4C rr rr     	jmp     L0042
0000F3r 1               
0000F3r 1               .endproc
0000F3r 1               
0000F3r 1               
