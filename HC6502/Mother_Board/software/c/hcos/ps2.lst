ca65 V2.17 - Git e1e5cd9
Main file   : ps2.s
Current file: ps2.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.17 - Git e1e5cd9
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.17 - Git e1e5cd9"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.import		_uart_printf
000000r 1               	.import		_gpio_init
000000r 1               	.import		_gpio_write
000000r 1               	.import		_gpio_read
000000r 1               	.import		_mdelay
000000r 1               	.export		_ps2_process
000000r 1               	.export		_ps2_init
000000r 1               	.export		_pi
000000r 1               	.export		_ps2_read
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _pi:
000000r 1  B0 00 20 7F  	.dword	$7F2000B0
000004r 1  B1 00 20 7F  	.dword	$7F2000B1
000008r 1  B0 00 40 7F  	.dword	$7F4000B0
00000Cr 1  B1 00 40 7F  	.dword	$7F4000B1
000010r 1  B2 00 40 7F  	.dword	$7F4000B2
000014r 1  B3 00 40 7F  	.dword	$7F4000B3
000018r 1  B4 00 40 7F  	.dword	$7F4000B4
00001Cr 1  B5 00 40 7F  	.dword	$7F4000B5
000020r 1  B6 00 40 7F  	.dword	$7F4000B6
000024r 1  B7 00 40 7F  	.dword	$7F4000B7
000028r 1               
000028r 1               .segment	"RODATA"
000000r 1               
000000r 1               L0063:
000000r 1  67 65 74 20  	.byte	$67,$65,$74,$20,$5B,$25,$63,$5D,$20,$5B,$25,$78,$5D,$0D,$0A,$00
000004r 1  5B 25 63 5D  
000008r 1  20 5B 25 78  
000010r 1               L005F:
000010r 1  67 65 74 20  	.byte	$67,$65,$74,$20,$30,$78,$66,$66,$0D,$0A,$00
000014r 1  30 78 66 66  
000018r 1  0D 0A 00     
00001Br 1               
00001Br 1               ; ---------------------------------------------------------------
00001Br 1               ; void __near__ ps2_process (void)
00001Br 1               ; ---------------------------------------------------------------
00001Br 1               
00001Br 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_ps2_process: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     decsp1
000003r 1  20 rr rr     L0056:	jsr     _ps2_read
000006r 1  A0 00        	ldy     #$00
000008r 1  91 rr        	sta     (sp),y
00000Ar 1  C9 FF        	cmp     #$FF
00000Cr 1  D0 0F        	bne     L005C
00000Er 1  A9 rr        	lda     #<(L005F)
000010r 1  A2 rr        	ldx     #>(L005F)
000012r 1  20 rr rr     	jsr     pushax
000015r 1  A0 02        	ldy     #$02
000017r 1  20 rr rr     	jsr     _uart_printf
00001Ar 1  4C rr rr     	jmp     L0056
00001Dr 1  A9 rr        L005C:	lda     #<(L0063)
00001Fr 1  A2 rr        	ldx     #>(L0063)
000021r 1  20 rr rr     	jsr     pushax
000024r 1  A0 02        	ldy     #$02
000026r 1  B1 rr        	lda     (sp),y
000028r 1  20 rr rr     	jsr     pusha0
00002Br 1  A0 04        	ldy     #$04
00002Dr 1  B1 rr        	lda     (sp),y
00002Fr 1  20 rr rr     	jsr     pusha0
000032r 1  A0 06        	ldy     #$06
000034r 1  20 rr rr     	jsr     _uart_printf
000037r 1  4C rr rr     	jmp     L0056
00003Ar 1               
00003Ar 1               .endproc
00003Ar 1               
00003Ar 1               ; ---------------------------------------------------------------
00003Ar 1               ; void __near__ ps2_init (void)
00003Ar 1               ; ---------------------------------------------------------------
00003Ar 1               
00003Ar 1               .segment	"CODE"
00003Ar 1               
00003Ar 1               .proc	_ps2_init: near
00003Ar 1               
00003Ar 1               .segment	"CODE"
00003Ar 1               
00003Ar 1  20 rr rr     	jsr     decsp1
00003Dr 1  AD rr rr     	lda     _pi+3
000040r 1  85 rr        	sta     sreg+1
000042r 1  AD rr rr     	lda     _pi+2
000045r 1  85 rr        	sta     sreg
000047r 1  AE rr rr     	ldx     _pi+1
00004Ar 1  AD rr rr     	lda     _pi
00004Dr 1  20 rr rr     	jsr     pusheax
000050r 1  A9 01        	lda     #$01
000052r 1  20 rr rr     	jsr     pusha
000055r 1  20 rr rr     	jsr     _gpio_init
000058r 1  AD rr rr     	lda     _pi+4+3
00005Br 1  85 rr        	sta     sreg+1
00005Dr 1  AD rr rr     	lda     _pi+4+2
000060r 1  85 rr        	sta     sreg
000062r 1  AE rr rr     	ldx     _pi+4+1
000065r 1  AD rr rr     	lda     _pi+4
000068r 1  20 rr rr     	jsr     pusheax
00006Br 1  A9 00        	lda     #$00
00006Dr 1  20 rr rr     	jsr     pusha
000070r 1  20 rr rr     	jsr     _gpio_init
000073r 1  A9 00        	lda     #$00
000075r 1  A8           	tay
000076r 1  91 rr        L007F:	sta     (sp),y
000078r 1  C9 08        	cmp     #$08
00007Ar 1  B0 28        	bcs     L006F
00007Cr 1  A2 00        	ldx     #$00
00007Er 1  B1 rr        	lda     (sp),y
000080r 1  20 rr rr     	jsr     aslax2
000083r 1  18           	clc
000084r 1  69 rr        	adc     #<(_pi+8)
000086r 1  A8           	tay
000087r 1  8A           	txa
000088r 1  69 rr        	adc     #>(_pi+8)
00008Ar 1  AA           	tax
00008Br 1  98           	tya
00008Cr 1  20 rr rr     	jsr     ldeaxi
00008Fr 1  20 rr rr     	jsr     pusheax
000092r 1  A9 00        	lda     #$00
000094r 1  20 rr rr     	jsr     pusha
000097r 1  20 rr rr     	jsr     _gpio_init
00009Ar 1  A0 00        	ldy     #$00
00009Cr 1  B1 rr        	lda     (sp),y
00009Er 1  18           	clc
00009Fr 1  69 01        	adc     #$01
0000A1r 1  4C rr rr     	jmp     L007F
0000A4r 1  AD rr rr     L006F:	lda     _pi+3
0000A7r 1  85 rr        	sta     sreg+1
0000A9r 1  AD rr rr     	lda     _pi+2
0000ACr 1  85 rr        	sta     sreg
0000AEr 1  AE rr rr     	ldx     _pi+1
0000B1r 1  AD rr rr     	lda     _pi
0000B4r 1  20 rr rr     	jsr     pusheax
0000B7r 1  A9 01        	lda     #$01
0000B9r 1  20 rr rr     	jsr     pusha
0000BCr 1  20 rr rr     	jsr     _gpio_write
0000BFr 1  4C rr rr     	jmp     incsp1
0000C2r 1               
0000C2r 1               .endproc
0000C2r 1               
0000C2r 1               ; ---------------------------------------------------------------
0000C2r 1               ; unsigned char __near__ ps2_read (void)
0000C2r 1               ; ---------------------------------------------------------------
0000C2r 1               
0000C2r 1               .segment	"CODE"
0000C2r 1               
0000C2r 1               .proc	_ps2_read: near
0000C2r 1               
0000C2r 1               .segment	"CODE"
0000C2r 1               
0000C2r 1  20 rr rr     	jsr     decsp1
0000C5r 1  A9 00        	lda     #$00
0000C7r 1  20 rr rr     	jsr     pusha
0000CAr 1  AD rr rr     	lda     _pi+3
0000CDr 1  85 rr        	sta     sreg+1
0000CFr 1  AD rr rr     	lda     _pi+2
0000D2r 1  85 rr        	sta     sreg
0000D4r 1  AE rr rr     	ldx     _pi+1
0000D7r 1  AD rr rr     	lda     _pi
0000DAr 1  20 rr rr     	jsr     pusheax
0000DDr 1  A9 00        	lda     #$00
0000DFr 1  20 rr rr     	jsr     pusha
0000E2r 1  20 rr rr     	jsr     _gpio_write
0000E5r 1  A9 64        	lda     #$64
0000E7r 1  20 rr rr     	jsr     pusha0
0000EAr 1  20 rr rr     	jsr     _mdelay
0000EDr 1  AD rr rr     L003D:	lda     _pi+4+3
0000F0r 1  85 rr        	sta     sreg+1
0000F2r 1  AD rr rr     	lda     _pi+4+2
0000F5r 1  85 rr        	sta     sreg
0000F7r 1  AE rr rr     	ldx     _pi+4+1
0000FAr 1  AD rr rr     	lda     _pi+4
0000FDr 1  20 rr rr     	jsr     pusheax
000100r 1  20 rr rr     	jsr     _gpio_read
000103r 1  C9 01        	cmp     #$01
000105r 1  D0 E6        	bne     L003D
000107r 1  A9 00        	lda     #$00
000109r 1  A0 01        	ldy     #$01
00010Br 1  91 rr        L0082:	sta     (sp),y
00010Dr 1  C9 08        	cmp     #$08
00010Fr 1  B0 40        	bcs     L0045
000111r 1  A2 00        	ldx     #$00
000113r 1  A1 rr        	lda     (sp,x)
000115r 1  20 rr rr     	jsr     pusha0
000118r 1  A0 03        	ldy     #$03
00011Ar 1  B1 rr        	lda     (sp),y
00011Cr 1  20 rr rr     	jsr     aslax2
00011Fr 1  18           	clc
000120r 1  69 rr        	adc     #<(_pi+8)
000122r 1  A8           	tay
000123r 1  8A           	txa
000124r 1  69 rr        	adc     #>(_pi+8)
000126r 1  AA           	tax
000127r 1  98           	tya
000128r 1  20 rr rr     	jsr     ldeaxi
00012Br 1  20 rr rr     	jsr     pusheax
00012Er 1  20 rr rr     	jsr     _gpio_read
000131r 1  85 rr        	sta     ptr1
000133r 1  86 rr        	stx     ptr1+1
000135r 1  A0 03        	ldy     #$03
000137r 1  B1 rr        	lda     (sp),y
000139r 1  A8           	tay
00013Ar 1  A5 rr        	lda     ptr1
00013Cr 1  A6 rr        	ldx     ptr1+1
00013Er 1  20 rr rr     	jsr     aslaxy
000141r 1  20 rr rr     	jsr     tosorax
000144r 1  A0 00        	ldy     #$00
000146r 1  91 rr        	sta     (sp),y
000148r 1  C8           	iny
000149r 1  B1 rr        	lda     (sp),y
00014Br 1  18           	clc
00014Cr 1  69 01        	adc     #$01
00014Er 1  4C rr rr     	jmp     L0082
000151r 1  AD rr rr     L0045:	lda     _pi+3
000154r 1  85 rr        	sta     sreg+1
000156r 1  AD rr rr     	lda     _pi+2
000159r 1  85 rr        	sta     sreg
00015Br 1  AE rr rr     	ldx     _pi+1
00015Er 1  AD rr rr     	lda     _pi
000161r 1  20 rr rr     	jsr     pusheax
000164r 1  A9 01        	lda     #$01
000166r 1  20 rr rr     	jsr     pusha
000169r 1  20 rr rr     	jsr     _gpio_write
00016Cr 1  A2 00        	ldx     #$00
00016Er 1  A1 rr        	lda     (sp,x)
000170r 1  4C rr rr     	jmp     incsp2
000173r 1               
000173r 1               .endproc
000173r 1               
000173r 1               
