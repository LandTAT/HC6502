ca65 V2.17 - Git e1e5cd9
Main file   : uart.s
Current file: uart.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.17 - Git e1e5cd9
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.17 - Git e1e5cd9"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.import		_vsnprintf
000000r 1               	.export		_uart_init
000000r 1               	.export		_uart_getc
000000r 1               	.export		_uart_putc
000000r 1               	.export		_uart_puts
000000r 1               	.export		_uart_printf
000000r 1               	.export		_uart_handler
000000r 1               	.import		_shell
000000r 1               	.export		_urb_index
000000r 1               	.export		_uart_recv_buf
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               L0071:
000000r 1  63 6D 64 20  	.byte	$63,$6D,$64,$20,$74,$6F,$6F,$20,$6C,$6F,$6E,$67,$21,$0A,$00
000004r 1  74 6F 6F 20  
000008r 1  6C 6F 6E 67  
00000Fr 1               
00000Fr 1               .segment	"BSS"
000000r 1               
000000r 1               _urb_index:
000000r 1  00 00        	.res	2,$00
000002r 1               _uart_recv_buf:
000002r 1  00 00 00 00  	.res	512,$00
000006r 1  00 00 00 00  
00000Ar 1  00 00 00 00  
000202r 1               
000202r 1               ; ---------------------------------------------------------------
000202r 1               ; int __near__ uart_init (void)
000202r 1               ; ---------------------------------------------------------------
000202r 1               
000202r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_uart_init: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     decsp1
000003r 1  A9 0B        	lda     #$0B
000005r 1  A0 00        	ldy     #$00
000007r 1  91 rr        	sta     (sp),y
000009r 1  8D 02 7F     	sta     $7F02
00000Cr 1  A9 1E        	lda     #$1E
00000Er 1  91 rr        	sta     (sp),y
000010r 1  8D 03 7F     	sta     $7F03
000013r 1  A2 00        	ldx     #$00
000015r 1  8A           	txa
000016r 1  4C rr rr     	jmp     incsp1
000019r 1               
000019r 1               .endproc
000019r 1               
000019r 1               ; ---------------------------------------------------------------
000019r 1               ; unsigned char __near__ uart_getc (void)
000019r 1               ; ---------------------------------------------------------------
000019r 1               
000019r 1               .segment	"CODE"
000019r 1               
000019r 1               .proc	_uart_getc: near
000019r 1               
000019r 1               .segment	"CODE"
000019r 1               
000019r 1  20 rr rr     	jsr     decsp2
00001Cr 1  AD 01 7F     L0085:	lda     $7F01
00001Fr 1  A0 00        	ldy     #$00
000021r 1  91 rr        	sta     (sp),y
000023r 1  29 08        	and     #$08
000025r 1  F0 F5        	beq     L0085
000027r 1  AD 00 7F     	lda     $7F00
00002Ar 1  C8           	iny
00002Br 1  91 rr        	sta     (sp),y
00002Dr 1  A2 00        	ldx     #$00
00002Fr 1  B1 rr        	lda     (sp),y
000031r 1  4C rr rr     	jmp     incsp2
000034r 1               
000034r 1               .endproc
000034r 1               
000034r 1               ; ---------------------------------------------------------------
000034r 1               ; void __near__ uart_putc (unsigned char)
000034r 1               ; ---------------------------------------------------------------
000034r 1               
000034r 1               .segment	"CODE"
000034r 1               
000034r 1               .proc	_uart_putc: near
000034r 1               
000034r 1               .segment	"CODE"
000034r 1               
000034r 1  20 rr rr     	jsr     decsp1
000037r 1  AD 01 7F     L0087:	lda     $7F01
00003Ar 1  A0 00        	ldy     #$00
00003Cr 1  91 rr        	sta     (sp),y
00003Er 1  29 10        	and     #$10
000040r 1  F0 F5        	beq     L0087
000042r 1  C8           	iny
000043r 1  B1 rr        	lda     (sp),y
000045r 1  8D 00 7F     	sta     $7F00
000048r 1  4C rr rr     	jmp     incsp2
00004Br 1               
00004Br 1               .endproc
00004Br 1               
00004Br 1               ; ---------------------------------------------------------------
00004Br 1               ; void __near__ uart_puts (__near__ unsigned char *)
00004Br 1               ; ---------------------------------------------------------------
00004Br 1               
00004Br 1               .segment	"CODE"
00004Br 1               
00004Br 1               .proc	_uart_puts: near
00004Br 1               
00004Br 1               .segment	"CODE"
00004Br 1               
00004Br 1  20 rr rr     	jsr     decsp2
00004Er 1  A2 00        	ldx     #$00
000050r 1  8A           	txa
000051r 1  20 rr rr     L0089:	jsr     stax0sp
000054r 1  18           	clc
000055r 1  A0 02        	ldy     #$02
000057r 1  71 rr        	adc     (sp),y
000059r 1  85 rr        	sta     ptr1
00005Br 1  8A           	txa
00005Cr 1  C8           	iny
00005Dr 1  71 rr        	adc     (sp),y
00005Fr 1  85 rr        	sta     ptr1+1
000061r 1  A0 00        	ldy     #$00
000063r 1  B1 rr        	lda     (ptr1),y
000065r 1  F0 23        	beq     L0044
000067r 1  20 rr rr     	jsr     ldax0sp
00006Ar 1  18           	clc
00006Br 1  A0 02        	ldy     #$02
00006Dr 1  71 rr        	adc     (sp),y
00006Fr 1  85 rr        	sta     ptr1
000071r 1  8A           	txa
000072r 1  C8           	iny
000073r 1  71 rr        	adc     (sp),y
000075r 1  85 rr        	sta     ptr1+1
000077r 1  A0 00        	ldy     #$00
000079r 1  B1 rr        	lda     (ptr1),y
00007Br 1  20 rr rr     	jsr     pusha
00007Er 1  20 rr rr     	jsr     _uart_putc
000081r 1  20 rr rr     	jsr     ldax0sp
000084r 1  20 rr rr     	jsr     incax1
000087r 1  4C rr rr     	jmp     L0089
00008Ar 1  4C rr rr     L0044:	jmp     incsp4
00008Dr 1               
00008Dr 1               .endproc
00008Dr 1               
00008Dr 1               ; ---------------------------------------------------------------
00008Dr 1               ; int __near__ uart_printf (__near__ const unsigned char *)
00008Dr 1               ; ---------------------------------------------------------------
00008Dr 1               
00008Dr 1               .segment	"CODE"
00008Dr 1               
00008Dr 1               .proc	_uart_printf: near
00008Dr 1               
00008Dr 1               .segment	"DATA"
000000r 1               
000000r 1               L0052:
000000r 1  00           	.byte	$00
000001r 1  00 00 00 00  	.res	255,$00
000005r 1  00 00 00 00  
000009r 1  00 00 00 00  
000100r 1               
000100r 1               .segment	"CODE"
00008Dr 1               
00008Dr 1  20 rr rr     	jsr     enter
000090r 1  20 rr rr     	jsr     decsp6
000093r 1  A0 06        	ldy     #$06
000095r 1  B1 rr        	lda     (sp),y
000097r 1  20 rr rr     	jsr     leaa0sp
00009Ar 1  20 rr rr     	jsr     incax5
00009Dr 1  20 rr rr     	jsr     stax0sp
0000A0r 1  A9 rr        	lda     #<(L0052)
0000A2r 1  A2 rr        	ldx     #>(L0052)
0000A4r 1  20 rr rr     	jsr     pushax
0000A7r 1  A2 01        	ldx     #$01
0000A9r 1  A9 00        	lda     #$00
0000ABr 1  20 rr rr     	jsr     pushax
0000AEr 1  A0 0A        	ldy     #$0A
0000B0r 1  B1 rr        	lda     (sp),y
0000B2r 1  20 rr rr     	jsr     leaa0sp
0000B5r 1  88           	dey
0000B6r 1  20 rr rr     	jsr     incaxy
0000B9r 1  20 rr rr     	jsr     pushw
0000BCr 1  A0 07        	ldy     #$07
0000BEr 1  20 rr rr     	jsr     ldaxysp
0000C1r 1  20 rr rr     	jsr     _vsnprintf
0000C4r 1  20 rr rr     	jsr     axlong
0000C7r 1  A0 02        	ldy     #$02
0000C9r 1  20 rr rr     	jsr     steaxysp
0000CCr 1  A9 rr        	lda     #<(L0052)
0000CEr 1  A2 rr        	ldx     #>(L0052)
0000D0r 1  20 rr rr     	jsr     pushax
0000D3r 1  20 rr rr     	jsr     _uart_puts
0000D6r 1  A0 03        	ldy     #$03
0000D8r 1  20 rr rr     	jsr     ldaxysp
0000DBr 1  A0 06        	ldy     #$06
0000DDr 1  4C rr rr     	jmp     leavey
0000E0r 1               
0000E0r 1               .endproc
0000E0r 1               
0000E0r 1               ; ---------------------------------------------------------------
0000E0r 1               ; void __near__ uart_handler (void)
0000E0r 1               ; ---------------------------------------------------------------
0000E0r 1               
0000E0r 1               .segment	"CODE"
0000E0r 1               
0000E0r 1               .proc	_uart_handler: near
0000E0r 1               
0000E0r 1               .segment	"CODE"
0000E0r 1               
0000E0r 1  20 rr rr     	jsr     decsp1
0000E3r 1  20 rr rr     	jsr     _uart_getc
0000E6r 1  A0 00        	ldy     #$00
0000E8r 1  91 rr        	sta     (sp),y
0000EAr 1  C9 0A        	cmp     #$0A
0000ECr 1  D0 03        	bne     L008E
0000EEr 1  4C rr rr     	jmp     incsp1
0000F1r 1  AD rr rr     L008E:	lda     _urb_index+1
0000F4r 1  C9 01        	cmp     #$01
0000F6r 1  D0 22        	bne     L008D
0000F8r 1  AD rr rr     	lda     _urb_index
0000FBr 1  C9 FF        	cmp     #$FF
0000FDr 1  D0 1B        	bne     L008D
0000FFr 1  B1 rr        	lda     (sp),y
000101r 1  C9 0D        	cmp     #$0D
000103r 1  F0 15        	beq     L008D
000105r 1  A9 rr        	lda     #<(L0071)
000107r 1  A2 rr        	ldx     #>(L0071)
000109r 1  20 rr rr     	jsr     pushax
00010Cr 1  20 rr rr     	jsr     _uart_puts
00010Fr 1  A9 00        	lda     #$00
000111r 1  8D rr rr     	sta     _urb_index
000114r 1  8D rr rr     	sta     _urb_index+1
000117r 1  4C rr rr     	jmp     incsp1
00011Ar 1  B1 rr        L008D:	lda     (sp),y
00011Cr 1  C9 0D        	cmp     #$0D
00011Er 1  D0 27        	bne     L0075
000120r 1  A9 rr        	lda     #<(_uart_recv_buf)
000122r 1  18           	clc
000123r 1  6D rr rr     	adc     _urb_index
000126r 1  85 rr        	sta     ptr1
000128r 1  A9 rr        	lda     #>(_uart_recv_buf)
00012Ar 1  6D rr rr     	adc     _urb_index+1
00012Dr 1  85 rr        	sta     ptr1+1
00012Fr 1  98           	tya
000130r 1  91 rr        	sta     (ptr1),y
000132r 1  A9 rr        	lda     #<(_uart_recv_buf)
000134r 1  A2 rr        	ldx     #>(_uart_recv_buf)
000136r 1  20 rr rr     	jsr     pushax
000139r 1  20 rr rr     	jsr     _shell
00013Cr 1  A9 00        	lda     #$00
00013Er 1  8D rr rr     	sta     _urb_index
000141r 1  8D rr rr     	sta     _urb_index+1
000144r 1  4C rr rr     	jmp     incsp1
000147r 1  A9 rr        L0075:	lda     #<(_uart_recv_buf)
000149r 1  18           	clc
00014Ar 1  6D rr rr     	adc     _urb_index
00014Dr 1  85 rr        	sta     ptr1
00014Fr 1  A9 rr        	lda     #>(_uart_recv_buf)
000151r 1  6D rr rr     	adc     _urb_index+1
000154r 1  85 rr        	sta     ptr1+1
000156r 1  B1 rr        	lda     (sp),y
000158r 1  91 rr        	sta     (ptr1),y
00015Ar 1  AD rr rr     	lda     _urb_index
00015Dr 1  AE rr rr     	ldx     _urb_index+1
000160r 1  20 rr rr     	jsr     incax1
000163r 1  8D rr rr     	sta     _urb_index
000166r 1  8E rr rr     	stx     _urb_index+1
000169r 1  B1 rr        	lda     (sp),y
00016Br 1  20 rr rr     	jsr     pusha
00016Er 1  20 rr rr     	jsr     _uart_putc
000171r 1  4C rr rr     	jmp     incsp1
000174r 1               
000174r 1               .endproc
000174r 1               
000174r 1               
